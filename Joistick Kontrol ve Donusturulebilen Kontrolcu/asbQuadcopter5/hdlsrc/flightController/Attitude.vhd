-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\flightController\Attitude.vhd
-- Created: 2019-01-13 13:17:28
-- 
-- Generated by MATLAB 9.5 and HDL Coder 3.13
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Attitude
-- Source Path: flightController/Flight Controller/Attitude
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Flight_Controller_pkg.ALL;

ENTITY Attitude IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        refAttitude                       :   IN    vector_of_std_logic_vector32(0 TO 1);  -- single [2]
        states_estim_X                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_Y                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_Z                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_yaw                  :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_pitch                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_roll                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_dx                   :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_dy                   :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_dz                   :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_p                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_q                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_r                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        tau_pitch                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        tau_roll                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END Attitude;


ARCHITECTURE rtl OF Attitude IS

  -- Component Declarations
  COMPONENT nfp_sub_comp
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_relop_comp
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT nfp_mul_comp
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_add_comp
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_relop_comp_block
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_sub_comp
    USE ENTITY work.nfp_sub_comp(rtl);

  FOR ALL : nfp_relop_comp
    USE ENTITY work.nfp_relop_comp(rtl);

  FOR ALL : nfp_mul_comp
    USE ENTITY work.nfp_mul_comp(rtl);

  FOR ALL : nfp_add_comp
    USE ENTITY work.nfp_add_comp(rtl);

  FOR ALL : nfp_relop_comp_block
    USE ENTITY work.nfp_relop_comp_block(rtl);

  -- Signals
  SIGNAL kconst                           : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL pitch                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL roll                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_2_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_1                         : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL kconst_2                         : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Upperlimit_out                   : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Lowerlimit_out                   : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Lowerlimit_out_0                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Lowerlimit_out_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Upperlimit_out_0                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Upperlimit_out_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_2_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_2_1_2                    : std_logic;
  SIGNAL Switch1_out_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_out1                       : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL nfp_out_2_1_3                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_2_1_4                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_2_1_5                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Discrete_Time_Integrator_x_reg   : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL nfp_out_2_1_6                    : std_logic;
  SIGNAL Discrete_Time_Integrator_u_sat_1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_1_2                    : std_logic;
  SIGNAL Switch1_out_0                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_1_3                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_1_4                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_1_5                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_1_6                    : std_logic;
  SIGNAL Discrete_Time_Integrator_u_sat_0 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Discrete_Time_Integrator_u_sat   : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL kconst_3                         : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL kconst_4                         : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL pitch_roll_error                 : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL pitch_roll_error_1               : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL nfp_out_1_1_7                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_1_8                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_1_9                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL q                                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_1_10                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_1_11                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_2_1_7                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_2_1_8                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_2_1_9                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL p                                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_2_1_10                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_2_1_11                   : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- ATTITUDE

  u_nfp_sub_comp : nfp_sub_comp
    PORT MAP( nfp_in1 => refAttitude(0),  -- single
              nfp_in2 => pitch,  -- single
              nfp_out => nfp_out_1_1  -- single
              );

  u_nfp_sub_comp_1 : nfp_sub_comp
    PORT MAP( nfp_in1 => refAttitude(1),  -- single
              nfp_in2 => roll,  -- single
              nfp_out => nfp_out_2_1  -- single
              );

  u_nfp_relop_comp : nfp_relop_comp
    PORT MAP( nfp_in1 => nfp_out_2_1_1,  -- single
              nfp_in2 => Lowerlimit_out(1),  -- single
              nfp_out1 => nfp_out_2_1_2
              );

  u_nfp_mul_comp : nfp_mul_comp
    PORT MAP( nfp_in1 => Delay_out1(1),  -- single
              nfp_in2 => kconst_1(1),  -- single
              nfp_out => nfp_out_2_1_3  -- single
              );

  u_nfp_sub_comp_2 : nfp_sub_comp
    PORT MAP( nfp_in1 => nfp_out_2_1,  -- single
              nfp_in2 => nfp_out_2_1_3,  -- single
              nfp_out => nfp_out_2_1_4  -- single
              );

  u_nfp_mul_comp_1 : nfp_mul_comp
    PORT MAP( nfp_in1 => nfp_out_2_1_4,  -- single
              nfp_in2 => kconst_2(1),  -- single
              nfp_out => nfp_out_2_1_5  -- single
              );

  u_nfp_add_comp : nfp_add_comp
    PORT MAP( nfp_in1 => Discrete_Time_Integrator_x_reg(1),  -- single
              nfp_in2 => nfp_out_2_1_5,  -- single
              nfp_out => nfp_out_2_1_1  -- single
              );

  u_nfp_relop_comp_1 : nfp_relop_comp_block
    PORT MAP( nfp_in1 => nfp_out_2_1_1,  -- single
              nfp_in2 => Upperlimit_out(1),  -- single
              nfp_out1 => nfp_out_2_1_6
              );

  u_nfp_relop_comp_2 : nfp_relop_comp
    PORT MAP( nfp_in1 => nfp_out_1_1_1,  -- single
              nfp_in2 => Lowerlimit_out(0),  -- single
              nfp_out1 => nfp_out_1_1_2
              );

  u_nfp_mul_comp_2 : nfp_mul_comp
    PORT MAP( nfp_in1 => Delay_out1(0),  -- single
              nfp_in2 => kconst_1(0),  -- single
              nfp_out => nfp_out_1_1_3  -- single
              );

  u_nfp_sub_comp_3 : nfp_sub_comp
    PORT MAP( nfp_in1 => nfp_out_1_1,  -- single
              nfp_in2 => nfp_out_1_1_3,  -- single
              nfp_out => nfp_out_1_1_4  -- single
              );

  u_nfp_mul_comp_3 : nfp_mul_comp
    PORT MAP( nfp_in1 => nfp_out_1_1_4,  -- single
              nfp_in2 => kconst_2(0),  -- single
              nfp_out => nfp_out_1_1_5  -- single
              );

  u_nfp_add_comp_1 : nfp_add_comp
    PORT MAP( nfp_in1 => Discrete_Time_Integrator_x_reg(0),  -- single
              nfp_in2 => nfp_out_1_1_5,  -- single
              nfp_out => nfp_out_1_1_1  -- single
              );

  u_nfp_relop_comp_3 : nfp_relop_comp_block
    PORT MAP( nfp_in1 => nfp_out_1_1_1,  -- single
              nfp_in2 => Upperlimit_out(0),  -- single
              nfp_out1 => nfp_out_1_1_6
              );

  u_nfp_mul_comp_4 : nfp_mul_comp
    PORT MAP( nfp_in1 => kconst(0),  -- single
              nfp_in2 => pitch_roll_error_1(0),  -- single
              nfp_out => nfp_out_1_1_7  -- single
              );

  u_nfp_mul_comp_5 : nfp_mul_comp
    PORT MAP( nfp_in1 => Discrete_Time_Integrator_x_reg(0),  -- single
              nfp_in2 => kconst_3(0),  -- single
              nfp_out => nfp_out_1_1_8  -- single
              );

  u_nfp_add_comp_2 : nfp_add_comp
    PORT MAP( nfp_in1 => nfp_out_1_1_7,  -- single
              nfp_in2 => nfp_out_1_1_8,  -- single
              nfp_out => nfp_out_1_1_9  -- single
              );

  u_nfp_mul_comp_6 : nfp_mul_comp
    PORT MAP( nfp_in1 => kconst_4(0),  -- single
              nfp_in2 => q,  -- single
              nfp_out => nfp_out_1_1_10  -- single
              );

  u_nfp_sub_comp_4 : nfp_sub_comp
    PORT MAP( nfp_in1 => nfp_out_1_1_9,  -- single
              nfp_in2 => nfp_out_1_1_10,  -- single
              nfp_out => nfp_out_1_1_11  -- single
              );

  u_nfp_mul_comp_7 : nfp_mul_comp
    PORT MAP( nfp_in1 => kconst(1),  -- single
              nfp_in2 => nfp_out_2_1,  -- single
              nfp_out => nfp_out_2_1_7  -- single
              );

  u_nfp_mul_comp_8 : nfp_mul_comp
    PORT MAP( nfp_in1 => Discrete_Time_Integrator_x_reg(1),  -- single
              nfp_in2 => kconst_3(1),  -- single
              nfp_out => nfp_out_2_1_8  -- single
              );

  u_nfp_add_comp_3 : nfp_add_comp
    PORT MAP( nfp_in1 => nfp_out_2_1_7,  -- single
              nfp_in2 => nfp_out_2_1_8,  -- single
              nfp_out => nfp_out_2_1_9  -- single
              );

  u_nfp_mul_comp_9 : nfp_mul_comp
    PORT MAP( nfp_in1 => kconst_4(1),  -- single
              nfp_in2 => p,  -- single
              nfp_out => nfp_out_2_1_10  -- single
              );

  u_nfp_sub_comp_5 : nfp_sub_comp
    PORT MAP( nfp_in1 => nfp_out_2_1_9,  -- single
              nfp_in2 => nfp_out_2_1_10,  -- single
              nfp_out => nfp_out_2_1_11  -- single
              );

  kconst(0) <= X"3c54fdf4";
  kconst(1) <= X"3c23d70a";

  pitch <= states_estim_pitch;

  roll <= states_estim_roll;

  kconst_1(0) <= X"3a83126f";
  kconst_1(1) <= X"3a83126f";

  kconst_2(0) <= X"3ba3d70a";
  kconst_2(1) <= X"3ba3d70a";

  Upperlimit_out(0) <= X"40000000";
  Upperlimit_out(1) <= X"40000000";

  Lowerlimit_out(0) <= X"c0000000";
  Lowerlimit_out(1) <= X"c0000000";

  Lowerlimit_out_0 <= Lowerlimit_out(0);

  Lowerlimit_out_1 <= Lowerlimit_out(1);

  Upperlimit_out_0 <= Upperlimit_out(0);

  Upperlimit_out_1 <= Upperlimit_out(1);

  
  Switch1_out_1 <= nfp_out_2_1_1 WHEN nfp_out_2_1_2 = '0' ELSE
      Lowerlimit_out_1;

  
  Discrete_Time_Integrator_u_sat_1 <= Switch1_out_1 WHEN nfp_out_2_1_6 = '0' ELSE
      Upperlimit_out_1;

  
  Switch1_out_0 <= nfp_out_1_1_1 WHEN nfp_out_1_1_2 = '0' ELSE
      Lowerlimit_out_0;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1(0) <= X"00000000";
      Delay_out1(1) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1(0) <= Discrete_Time_Integrator_x_reg(0);
        Delay_out1(1) <= Discrete_Time_Integrator_x_reg(1);
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Discrete_Time_Integrator_u_sat_0 <= Switch1_out_0 WHEN nfp_out_1_1_6 = '0' ELSE
      Upperlimit_out_0;

  Discrete_Time_Integrator_u_sat(0) <= Discrete_Time_Integrator_u_sat_0;
  Discrete_Time_Integrator_u_sat(1) <= Discrete_Time_Integrator_u_sat_1;

  Discrete_Time_Integrator_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Discrete_Time_Integrator_x_reg(0) <= X"00000000";
      Discrete_Time_Integrator_x_reg(1) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Discrete_Time_Integrator_x_reg(0) <= Discrete_Time_Integrator_u_sat(0);
        Discrete_Time_Integrator_x_reg(1) <= Discrete_Time_Integrator_u_sat(1);
      END IF;
    END IF;
  END PROCESS Discrete_Time_Integrator_reg_process;


  kconst_3(0) <= X"3c23d70a";
  kconst_3(1) <= X"3c23d70a";

  kconst_4(0) <= X"3b03126f";
  kconst_4(1) <= X"3b378034";

  pitch_roll_error(0) <= nfp_out_1_1;
  pitch_roll_error(1) <= nfp_out_2_1;

  pitch_roll_error_1 <= pitch_roll_error;

  q <= states_estim_q;

  p <= states_estim_p;

  tau_pitch <= nfp_out_1_1_11;

  tau_roll <= nfp_out_2_1_11;

END rtl;

