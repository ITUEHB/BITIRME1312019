-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\flightController\Yaw.vhd
-- Created: 2019-01-13 13:18:58
-- 
-- Generated by MATLAB 9.5 and HDL Coder 3.13
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.005
-- Target subsystem base rate: 0.005
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Yaw
-- Source Path: Yaw
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Yaw IS
  PORT( yaw_ref                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_X                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_Y                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_Z                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_yaw                  :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_pitch                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_roll                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_dx                   :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_dy                   :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_dz                   :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_p                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_q                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        states_estim_r                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        yaw_1                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        tau_yaw                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END Yaw;


ARCHITECTURE rtl OF Yaw IS

  -- Component Declarations
  COMPONENT nfp_sub_comp
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_mul_comp
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_sub_comp
    USE ENTITY work.nfp_sub_comp(rtl);

  FOR ALL : nfp_mul_comp
    USE ENTITY work.nfp_mul_comp(rtl);

  -- Signals
  SIGNAL kconst                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL yaw_2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL P_yaw_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL r                                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL D_yaw_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_sub_comp : nfp_sub_comp
    PORT MAP( nfp_in1 => yaw_ref,  -- single
              nfp_in2 => yaw_2,  -- single
              nfp_out => Sum1_out1  -- single
              );

  u_nfp_mul_comp : nfp_mul_comp
    PORT MAP( nfp_in1 => kconst,  -- single
              nfp_in2 => Sum1_out1,  -- single
              nfp_out => P_yaw_out1  -- single
              );

  u_nfp_mul_comp_1 : nfp_mul_comp
    PORT MAP( nfp_in1 => kconst_1,  -- single
              nfp_in2 => r,  -- single
              nfp_out => D_yaw_out1  -- single
              );

  u_nfp_sub_comp_1 : nfp_sub_comp
    PORT MAP( nfp_in1 => P_yaw_out1,  -- single
              nfp_in2 => D_yaw_out1,  -- single
              nfp_out => Sum2_out1  -- single
              );

  yaw_1 <= states_estim_yaw;

  kconst <= X"3b83126f";

  yaw_2 <= states_estim_yaw;

  kconst_1 <= X"3a9d4952";

  r <= states_estim_r;

  tau_yaw <= Sum2_out1;

END rtl;

