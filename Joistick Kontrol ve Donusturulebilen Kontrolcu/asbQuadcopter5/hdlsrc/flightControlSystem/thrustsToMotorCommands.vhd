-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\flightControlSystem\thrustsToMotorCommands.vhd
-- Created: 2019-01-13 13:16:31
-- 
-- Generated by MATLAB 9.5 and HDL Coder 3.13
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: thrustsToMotorCommands
-- Source Path: flightController/Flight Controller/thrustsToMotorCommands
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.flightController_pkg.ALL;

ENTITY thrustsToMotorCommands IS
  PORT( thrusts_refin                     :   IN    vector_of_std_logic_vector32(0 TO 3);  -- single [4]
        motors_cmdout                     :   OUT   vector_of_std_logic_vector32(0 TO 3)  -- single [4]
        );
END thrustsToMotorCommands;


ARCHITECTURE rtl OF thrustsToMotorCommands IS

  -- Component Declarations
  COMPONENT nfp_mul_comp
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_relop_comp_block
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT nfp_relop_comp
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT nfp_gain_pow2_comp
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic;  -- ufix1
          nfp_in3                         :   IN    std_logic_vector(8 DOWNTO 0);  -- sfix9
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_mul_comp
    USE ENTITY work.nfp_mul_comp(rtl);

  FOR ALL : nfp_relop_comp_block
    USE ENTITY work.nfp_relop_comp_block(rtl);

  FOR ALL : nfp_relop_comp
    USE ENTITY work.nfp_relop_comp(rtl);

  FOR ALL : nfp_gain_pow2_comp
    USE ENTITY work.nfp_gain_pow2_comp(rtl);

  -- Signals
  SIGNAL kconst                           : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL nfp_out_1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Upperlimit_out                   : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL nfp_out_1_1_1                    : std_logic;
  SIGNAL Lowerlimit_out                   : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL nfp_out_1_1_2                    : std_logic;
  SIGNAL Lowerlimit_out_0                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_out_0                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Upperlimit_out_0                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Saturation5_out1_0               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_2_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_2_1_1                    : std_logic;
  SIGNAL nfp_out_2_1_2                    : std_logic;
  SIGNAL Lowerlimit_out_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_out_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Upperlimit_out_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Saturation5_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_3_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_3_1_1                    : std_logic;
  SIGNAL nfp_out_3_1_2                    : std_logic;
  SIGNAL Lowerlimit_out_2                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_out_2                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Upperlimit_out_2                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Saturation5_out1_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_4_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_4_1_1                    : std_logic;
  SIGNAL nfp_out_4_1_2                    : std_logic;
  SIGNAL Lowerlimit_out_3                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_out_3                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Upperlimit_out_3                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Saturation5_out1_3               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL pw2_sign_const                   : std_logic;  -- ufix1
  SIGNAL pw2_shift_const                  : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL pw2_sign_const_1                 : std_logic;  -- ufix1
  SIGNAL pw2_shift_const_1                : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL pw2_sign_const_2                 : std_logic;  -- ufix1
  SIGNAL pw2_shift_const_2                : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL pw2_sign_const_3                 : std_logic;  -- ufix1
  SIGNAL pw2_shift_const_3                : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL MotorDirections_out1             : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]

BEGIN
  u_nfp_mul_comp : nfp_mul_comp
    PORT MAP( nfp_in1 => thrusts_refin(0),  -- single
              nfp_in2 => kconst(0),  -- single
              nfp_out => nfp_out_1_1  -- single
              );

  u_nfp_relop_comp : nfp_relop_comp_block
    PORT MAP( nfp_in1 => nfp_out_1_1,  -- single
              nfp_in2 => Upperlimit_out(0),  -- single
              nfp_out1 => nfp_out_1_1_1
              );

  u_nfp_relop_comp_1 : nfp_relop_comp
    PORT MAP( nfp_in1 => nfp_out_1_1,  -- single
              nfp_in2 => Lowerlimit_out(0),  -- single
              nfp_out1 => nfp_out_1_1_2
              );

  u_nfp_mul_comp_1 : nfp_mul_comp
    PORT MAP( nfp_in1 => thrusts_refin(1),  -- single
              nfp_in2 => kconst(1),  -- single
              nfp_out => nfp_out_2_1  -- single
              );

  u_nfp_relop_comp_2 : nfp_relop_comp_block
    PORT MAP( nfp_in1 => nfp_out_2_1,  -- single
              nfp_in2 => Upperlimit_out(1),  -- single
              nfp_out1 => nfp_out_2_1_1
              );

  u_nfp_relop_comp_3 : nfp_relop_comp
    PORT MAP( nfp_in1 => nfp_out_2_1,  -- single
              nfp_in2 => Lowerlimit_out(1),  -- single
              nfp_out1 => nfp_out_2_1_2
              );

  u_nfp_mul_comp_2 : nfp_mul_comp
    PORT MAP( nfp_in1 => thrusts_refin(2),  -- single
              nfp_in2 => kconst(2),  -- single
              nfp_out => nfp_out_3_1  -- single
              );

  u_nfp_relop_comp_4 : nfp_relop_comp_block
    PORT MAP( nfp_in1 => nfp_out_3_1,  -- single
              nfp_in2 => Upperlimit_out(2),  -- single
              nfp_out1 => nfp_out_3_1_1
              );

  u_nfp_relop_comp_5 : nfp_relop_comp
    PORT MAP( nfp_in1 => nfp_out_3_1,  -- single
              nfp_in2 => Lowerlimit_out(2),  -- single
              nfp_out1 => nfp_out_3_1_2
              );

  u_nfp_mul_comp_3 : nfp_mul_comp
    PORT MAP( nfp_in1 => thrusts_refin(3),  -- single
              nfp_in2 => kconst(3),  -- single
              nfp_out => nfp_out_4_1  -- single
              );

  u_nfp_relop_comp_6 : nfp_relop_comp_block
    PORT MAP( nfp_in1 => nfp_out_4_1,  -- single
              nfp_in2 => Upperlimit_out(3),  -- single
              nfp_out1 => nfp_out_4_1_1
              );

  u_nfp_relop_comp_7 : nfp_relop_comp
    PORT MAP( nfp_in1 => nfp_out_4_1,  -- single
              nfp_in2 => Lowerlimit_out(3),  -- single
              nfp_out1 => nfp_out_4_1_2
              );

  u_nfp_gain_pow2_comp : nfp_gain_pow2_comp
    PORT MAP( nfp_in1 => Saturation5_out1_0,  -- single
              nfp_in2 => pw2_sign_const,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const),  -- sfix9
              nfp_out => MotorDirections_out1(0)  -- single
              );

  u_nfp_gain_pow2_comp_1 : nfp_gain_pow2_comp
    PORT MAP( nfp_in1 => Saturation5_out1_1,  -- single
              nfp_in2 => pw2_sign_const_1,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const_1),  -- sfix9
              nfp_out => MotorDirections_out1(1)  -- single
              );

  u_nfp_gain_pow2_comp_2 : nfp_gain_pow2_comp
    PORT MAP( nfp_in1 => Saturation5_out1_2,  -- single
              nfp_in2 => pw2_sign_const_2,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const_2),  -- sfix9
              nfp_out => MotorDirections_out1(2)  -- single
              );

  u_nfp_gain_pow2_comp_3 : nfp_gain_pow2_comp
    PORT MAP( nfp_in1 => Saturation5_out1_3,  -- single
              nfp_in2 => pw2_sign_const_3,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const_3),  -- sfix9
              nfp_out => MotorDirections_out1(3)  -- single
              );

  kconst(0) <= X"c4bf5742";
  kconst(1) <= X"c4bf5742";
  kconst(2) <= X"c4bf5742";
  kconst(3) <= X"c4bf5742";

  Upperlimit_out(0) <= X"43fa0000";
  Upperlimit_out(1) <= X"43fa0000";
  Upperlimit_out(2) <= X"43fa0000";
  Upperlimit_out(3) <= X"43fa0000";

  Lowerlimit_out(0) <= X"41200000";
  Lowerlimit_out(1) <= X"41200000";
  Lowerlimit_out(2) <= X"41200000";
  Lowerlimit_out(3) <= X"41200000";

  Lowerlimit_out_0 <= Lowerlimit_out(0);

  
  Switch1_out_0 <= nfp_out_1_1 WHEN nfp_out_1_1_2 = '0' ELSE
      Lowerlimit_out_0;

  Upperlimit_out_0 <= Upperlimit_out(0);

  
  Saturation5_out1_0 <= Switch1_out_0 WHEN nfp_out_1_1_1 = '0' ELSE
      Upperlimit_out_0;

  Lowerlimit_out_1 <= Lowerlimit_out(1);

  
  Switch1_out_1 <= nfp_out_2_1 WHEN nfp_out_2_1_2 = '0' ELSE
      Lowerlimit_out_1;

  Upperlimit_out_1 <= Upperlimit_out(1);

  
  Saturation5_out1_1 <= Switch1_out_1 WHEN nfp_out_2_1_1 = '0' ELSE
      Upperlimit_out_1;

  Lowerlimit_out_2 <= Lowerlimit_out(2);

  
  Switch1_out_2 <= nfp_out_3_1 WHEN nfp_out_3_1_2 = '0' ELSE
      Lowerlimit_out_2;

  Upperlimit_out_2 <= Upperlimit_out(2);

  
  Saturation5_out1_2 <= Switch1_out_2 WHEN nfp_out_3_1_1 = '0' ELSE
      Upperlimit_out_2;

  Lowerlimit_out_3 <= Lowerlimit_out(3);

  
  Switch1_out_3 <= nfp_out_4_1 WHEN nfp_out_4_1_2 = '0' ELSE
      Lowerlimit_out_3;

  Upperlimit_out_3 <= Upperlimit_out(3);

  
  Saturation5_out1_3 <= Switch1_out_3 WHEN nfp_out_4_1_1 = '0' ELSE
      Upperlimit_out_3;

  pw2_sign_const <= '0';

  pw2_shift_const <= to_signed(16#000#, 9);

  pw2_sign_const_1 <= '1';

  pw2_shift_const_1 <= to_signed(16#000#, 9);

  pw2_sign_const_2 <= '0';

  pw2_shift_const_2 <= to_signed(16#000#, 9);

  pw2_sign_const_3 <= '1';

  pw2_shift_const_3 <= to_signed(16#000#, 9);


  motors_cmdout <= MotorDirections_out1;

END rtl;

