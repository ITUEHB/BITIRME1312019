-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\flightControlSystem\ControlMixer.vhd
-- Created: 2019-01-13 13:16:30
-- 
-- Generated by MATLAB 9.5 and HDL Coder 3.13
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ControlMixer
-- Source Path: flightController/Flight Controller/ControlMixer
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.flightController_pkg.ALL;

ENTITY ControlMixer IS
  PORT( tau_pitch                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        tau_roll                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        tau_yaw                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        totalThrust                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        thrusts_refout                    :   OUT   vector_of_std_logic_vector32(0 TO 3)  -- single [4]
        );
END ControlMixer;


ARCHITECTURE rtl OF ControlMixer IS

  -- Component Declarations
  COMPONENT nfp_mul_comp
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_add_comp
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_mul_comp
    USE ENTITY work.nfp_mul_comp(rtl);

  FOR ALL : nfp_add_comp
    USE ENTITY work.nfp_add_comp(rtl);

  -- Signals
  SIGNAL TorqueTotalThrustToThrustPerMotor_col1 : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL TorqueTotalThrustToThrustPerMotor_col2 : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL TorqueTotalThrustToThrustPerMotor_col3 : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL TorqueTotalThrustToThrustPerMotor_col4 : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL TorqueTotalThrustToThrustPerMotor_out1 : matrix_of_std_logic_vector32(0 TO 3, 0 TO 3);  -- ufix32 [4x4]
  SIGNAL TorqueTotalThrustToThrustPerMotor_out1t : matrix_of_std_logic_vector32(0 TO 3, 0 TO 3);  -- ufix32 [4x4]
  SIGNAL tmp_Product_dotp_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_1_1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_1_2             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_1_3             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_3               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_0               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sum_Product_dotp_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sum_Product_dotp_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_3_1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_2_1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_0_1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sum_Product_dotp_1_1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sum_Product_dotp_2_1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_3_2             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_2_2             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_0_2             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sum_Product_dotp_1_2             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sum_Product_dotp_2_2             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_3_3             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_2_3             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_Product_dotp_0_3             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sum_Product_dotp_1_3             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sum_Product_dotp_2_3             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]

BEGIN
  u_nfp_mul_comp : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(1, 0),  -- single
              nfp_in2 => tau_yaw,  -- single
              nfp_out => tmp_Product_dotp_1  -- single
              );

  u_nfp_mul_comp_1 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(1, 1),  -- single
              nfp_in2 => tau_yaw,  -- single
              nfp_out => tmp_Product_dotp_1_1  -- single
              );

  u_nfp_mul_comp_2 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(1, 2),  -- single
              nfp_in2 => tau_yaw,  -- single
              nfp_out => tmp_Product_dotp_1_2  -- single
              );

  u_nfp_mul_comp_3 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(1, 3),  -- single
              nfp_in2 => tau_yaw,  -- single
              nfp_out => tmp_Product_dotp_1_3  -- single
              );

  u_nfp_mul_comp_4 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(3, 0),  -- single
              nfp_in2 => tau_roll,  -- single
              nfp_out => tmp_Product_dotp_3  -- single
              );

  u_nfp_mul_comp_5 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(2, 0),  -- single
              nfp_in2 => tau_pitch,  -- single
              nfp_out => tmp_Product_dotp_2  -- single
              );

  u_nfp_mul_comp_6 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(0, 0),  -- single
              nfp_in2 => totalThrust,  -- single
              nfp_out => tmp_Product_dotp_0  -- single
              );

  u_nfp_add_comp : nfp_add_comp
    PORT MAP( nfp_in1 => tmp_Product_dotp_1,  -- single
              nfp_in2 => tmp_Product_dotp_0,  -- single
              nfp_out => sum_Product_dotp_1  -- single
              );

  u_nfp_add_comp_1 : nfp_add_comp
    PORT MAP( nfp_in1 => tmp_Product_dotp_2,  -- single
              nfp_in2 => sum_Product_dotp_1,  -- single
              nfp_out => sum_Product_dotp_2  -- single
              );

  u_nfp_add_comp_2 : nfp_add_comp
    PORT MAP( nfp_in1 => tmp_Product_dotp_3,  -- single
              nfp_in2 => sum_Product_dotp_2,  -- single
              nfp_out => Product_out1(0)  -- single
              );

  u_nfp_mul_comp_7 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(3, 1),  -- single
              nfp_in2 => tau_roll,  -- single
              nfp_out => tmp_Product_dotp_3_1  -- single
              );

  u_nfp_mul_comp_8 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(2, 1),  -- single
              nfp_in2 => tau_pitch,  -- single
              nfp_out => tmp_Product_dotp_2_1  -- single
              );

  u_nfp_mul_comp_9 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(0, 1),  -- single
              nfp_in2 => totalThrust,  -- single
              nfp_out => tmp_Product_dotp_0_1  -- single
              );

  u_nfp_add_comp_3 : nfp_add_comp
    PORT MAP( nfp_in1 => tmp_Product_dotp_1_1,  -- single
              nfp_in2 => tmp_Product_dotp_0_1,  -- single
              nfp_out => sum_Product_dotp_1_1  -- single
              );

  u_nfp_add_comp_4 : nfp_add_comp
    PORT MAP( nfp_in1 => tmp_Product_dotp_2_1,  -- single
              nfp_in2 => sum_Product_dotp_1_1,  -- single
              nfp_out => sum_Product_dotp_2_1  -- single
              );

  u_nfp_add_comp_5 : nfp_add_comp
    PORT MAP( nfp_in1 => tmp_Product_dotp_3_1,  -- single
              nfp_in2 => sum_Product_dotp_2_1,  -- single
              nfp_out => Product_out1(1)  -- single
              );

  u_nfp_mul_comp_10 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(3, 2),  -- single
              nfp_in2 => tau_roll,  -- single
              nfp_out => tmp_Product_dotp_3_2  -- single
              );

  u_nfp_mul_comp_11 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(2, 2),  -- single
              nfp_in2 => tau_pitch,  -- single
              nfp_out => tmp_Product_dotp_2_2  -- single
              );

  u_nfp_mul_comp_12 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(0, 2),  -- single
              nfp_in2 => totalThrust,  -- single
              nfp_out => tmp_Product_dotp_0_2  -- single
              );

  u_nfp_add_comp_6 : nfp_add_comp
    PORT MAP( nfp_in1 => tmp_Product_dotp_1_2,  -- single
              nfp_in2 => tmp_Product_dotp_0_2,  -- single
              nfp_out => sum_Product_dotp_1_2  -- single
              );

  u_nfp_add_comp_7 : nfp_add_comp
    PORT MAP( nfp_in1 => tmp_Product_dotp_2_2,  -- single
              nfp_in2 => sum_Product_dotp_1_2,  -- single
              nfp_out => sum_Product_dotp_2_2  -- single
              );

  u_nfp_add_comp_8 : nfp_add_comp
    PORT MAP( nfp_in1 => tmp_Product_dotp_3_2,  -- single
              nfp_in2 => sum_Product_dotp_2_2,  -- single
              nfp_out => Product_out1(2)  -- single
              );

  u_nfp_mul_comp_13 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(3, 3),  -- single
              nfp_in2 => tau_roll,  -- single
              nfp_out => tmp_Product_dotp_3_3  -- single
              );

  u_nfp_mul_comp_14 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(2, 3),  -- single
              nfp_in2 => tau_pitch,  -- single
              nfp_out => tmp_Product_dotp_2_3  -- single
              );

  u_nfp_mul_comp_15 : nfp_mul_comp
    PORT MAP( nfp_in1 => TorqueTotalThrustToThrustPerMotor_out1t(0, 3),  -- single
              nfp_in2 => totalThrust,  -- single
              nfp_out => tmp_Product_dotp_0_3  -- single
              );

  u_nfp_add_comp_9 : nfp_add_comp
    PORT MAP( nfp_in1 => tmp_Product_dotp_1_3,  -- single
              nfp_in2 => tmp_Product_dotp_0_3,  -- single
              nfp_out => sum_Product_dotp_1_3  -- single
              );

  u_nfp_add_comp_10 : nfp_add_comp
    PORT MAP( nfp_in1 => tmp_Product_dotp_2_3,  -- single
              nfp_in2 => sum_Product_dotp_1_3,  -- single
              nfp_out => sum_Product_dotp_2_3  -- single
              );

  u_nfp_add_comp_11 : nfp_add_comp
    PORT MAP( nfp_in1 => tmp_Product_dotp_3_3,  -- single
              nfp_in2 => sum_Product_dotp_2_3,  -- single
              nfp_out => Product_out1(3)  -- single
              );

  TorqueTotalThrustToThrustPerMotor_col1(0) <= X"3e800000";
  TorqueTotalThrustToThrustPerMotor_col1(1) <= X"3e800000";
  TorqueTotalThrustToThrustPerMotor_col1(2) <= X"3e800000";
  TorqueTotalThrustToThrustPerMotor_col1(3) <= X"3e800000";

  TorqueTotalThrustToThrustPerMotor_col2(0) <= X"42cf25b2";
  TorqueTotalThrustToThrustPerMotor_col2(1) <= X"c2cf25b2";
  TorqueTotalThrustToThrustPerMotor_col2(2) <= X"42cf25b2";
  TorqueTotalThrustToThrustPerMotor_col2(3) <= X"c2cf25b2";

  TorqueTotalThrustToThrustPerMotor_col3(0) <= X"c0b54f37";
  TorqueTotalThrustToThrustPerMotor_col3(1) <= X"c0b54f37";
  TorqueTotalThrustToThrustPerMotor_col3(2) <= X"40b54f37";
  TorqueTotalThrustToThrustPerMotor_col3(3) <= X"40b54f37";

  TorqueTotalThrustToThrustPerMotor_col4(0) <= X"c0b54f37";
  TorqueTotalThrustToThrustPerMotor_col4(1) <= X"40b54f37";
  TorqueTotalThrustToThrustPerMotor_col4(2) <= X"40b54f37";
  TorqueTotalThrustToThrustPerMotor_col4(3) <= X"c0b54f37";

  TorqueTotalThrustToThrustPerMotor_out1(0, 0) <= TorqueTotalThrustToThrustPerMotor_col1(0);
  TorqueTotalThrustToThrustPerMotor_out1(1, 0) <= TorqueTotalThrustToThrustPerMotor_col1(1);
  TorqueTotalThrustToThrustPerMotor_out1(2, 0) <= TorqueTotalThrustToThrustPerMotor_col1(2);
  TorqueTotalThrustToThrustPerMotor_out1(3, 0) <= TorqueTotalThrustToThrustPerMotor_col1(3);
  TorqueTotalThrustToThrustPerMotor_out1(0, 1) <= TorqueTotalThrustToThrustPerMotor_col2(0);
  TorqueTotalThrustToThrustPerMotor_out1(1, 1) <= TorqueTotalThrustToThrustPerMotor_col2(1);
  TorqueTotalThrustToThrustPerMotor_out1(2, 1) <= TorqueTotalThrustToThrustPerMotor_col2(2);
  TorqueTotalThrustToThrustPerMotor_out1(3, 1) <= TorqueTotalThrustToThrustPerMotor_col2(3);
  TorqueTotalThrustToThrustPerMotor_out1(0, 2) <= TorqueTotalThrustToThrustPerMotor_col3(0);
  TorqueTotalThrustToThrustPerMotor_out1(1, 2) <= TorqueTotalThrustToThrustPerMotor_col3(1);
  TorqueTotalThrustToThrustPerMotor_out1(2, 2) <= TorqueTotalThrustToThrustPerMotor_col3(2);
  TorqueTotalThrustToThrustPerMotor_out1(3, 2) <= TorqueTotalThrustToThrustPerMotor_col3(3);
  TorqueTotalThrustToThrustPerMotor_out1(0, 3) <= TorqueTotalThrustToThrustPerMotor_col4(0);
  TorqueTotalThrustToThrustPerMotor_out1(1, 3) <= TorqueTotalThrustToThrustPerMotor_col4(1);
  TorqueTotalThrustToThrustPerMotor_out1(2, 3) <= TorqueTotalThrustToThrustPerMotor_col4(2);
  TorqueTotalThrustToThrustPerMotor_out1(3, 3) <= TorqueTotalThrustToThrustPerMotor_col4(3);

  transpose_output : PROCESS (TorqueTotalThrustToThrustPerMotor_out1)
  BEGIN
    TorqueTotalThrustToThrustPerMotor_out1t(0, 0) <= TorqueTotalThrustToThrustPerMotor_out1(0, 0);
    TorqueTotalThrustToThrustPerMotor_out1t(1, 0) <= TorqueTotalThrustToThrustPerMotor_out1(0, 1);
    TorqueTotalThrustToThrustPerMotor_out1t(2, 0) <= TorqueTotalThrustToThrustPerMotor_out1(0, 2);
    TorqueTotalThrustToThrustPerMotor_out1t(3, 0) <= TorqueTotalThrustToThrustPerMotor_out1(0, 3);
    TorqueTotalThrustToThrustPerMotor_out1t(0, 1) <= TorqueTotalThrustToThrustPerMotor_out1(1, 0);
    TorqueTotalThrustToThrustPerMotor_out1t(1, 1) <= TorqueTotalThrustToThrustPerMotor_out1(1, 1);
    TorqueTotalThrustToThrustPerMotor_out1t(2, 1) <= TorqueTotalThrustToThrustPerMotor_out1(1, 2);
    TorqueTotalThrustToThrustPerMotor_out1t(3, 1) <= TorqueTotalThrustToThrustPerMotor_out1(1, 3);
    TorqueTotalThrustToThrustPerMotor_out1t(0, 2) <= TorqueTotalThrustToThrustPerMotor_out1(2, 0);
    TorqueTotalThrustToThrustPerMotor_out1t(1, 2) <= TorqueTotalThrustToThrustPerMotor_out1(2, 1);
    TorqueTotalThrustToThrustPerMotor_out1t(2, 2) <= TorqueTotalThrustToThrustPerMotor_out1(2, 2);
    TorqueTotalThrustToThrustPerMotor_out1t(3, 2) <= TorqueTotalThrustToThrustPerMotor_out1(2, 3);
    TorqueTotalThrustToThrustPerMotor_out1t(0, 3) <= TorqueTotalThrustToThrustPerMotor_out1(3, 0);
    TorqueTotalThrustToThrustPerMotor_out1t(1, 3) <= TorqueTotalThrustToThrustPerMotor_out1(3, 1);
    TorqueTotalThrustToThrustPerMotor_out1t(2, 3) <= TorqueTotalThrustToThrustPerMotor_out1(3, 2);
    TorqueTotalThrustToThrustPerMotor_out1t(3, 3) <= TorqueTotalThrustToThrustPerMotor_out1(3, 3);
  END PROCESS transpose_output;



  thrusts_refout <= Product_out1;

END rtl;

